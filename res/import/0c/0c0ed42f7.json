[{"__type__":"cc.Material","_effectAsset":{"__uuid__":"a7+s2y16JPj4EGEFhqKWO3"},"_defines":[{}],"_states":[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],"_props":[{"radius":0.8,"smoothness":0.4,"intensity":0.6}]},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"77eMafY9BFOY80x6A2gXTm"},"_defines":[{},{},{}],"_states":[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],"_props":[{},{},{}]},{"__type__":"cc.EffectAsset","_name":"../shader-lib/post-process/effects/bloom","techniques":[{"name":"normal","passes":[{"name":"prefilter","program":"../shader-lib/post-process/effects/bloom|post-process-vs:vert|prefilter4:frag","properties":{"threshold":{"value":[0.5],"type":13},"softKnee":{"value":[0.5],"type":13}}},{"name":"downsample","postEffect":{"output":{"size":2139094529,"name":"bloom_texture"}},"program":"../shader-lib/post-process/effects/bloom|post-process-vs:vert|downsample4:frag"},{"name":"upsample","program":"../shader-lib/post-process/effects/bloom|post-process-vs:vert|upsample:frag","properties":{"sampleScale":{"value":[1],"type":13}}}]},{"name":"high","passes":[{"name":"prefilter","program":"../shader-lib/post-process/effects/bloom|post-process-vs:vert|prefilter13:frag","properties":{"threshold":{"value":[0.5],"type":13},"softKnee":{"value":[0.5],"type":13}}},{"name":"downsample","postEffect":{"output":{"size":2139094529,"name":"bloom_texture"}},"program":"../shader-lib/post-process/effects/bloom|post-process-vs:vert|downsample13:frag"},{"name":"upsample","program":"../shader-lib/post-process/effects/bloom|post-process-vs:vert|upsample:frag","properties":{"sampleScale":{"value":[1],"type":13}}}]}],"shaders":[{"hash":1675157700,"glsl3":{"vert":"precision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nin vec2 a_position;\nin vec2 a_texCoord;\nout vec2 v_uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform sampler2D pe_origin_texture;\nuniform sampler2D pe_input_texture;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nvec4 QuadraticThreshold(vec4 color, float threshold, float softKnee)\n{\n  vec3 curve = vec3(threshold - softKnee, softKnee * 2.0, 0.25 / softKnee);\n  float br = max(max(color.r, color.g), color.b);\n  float rq = clamp(br - curve.x, 0.0, curve.y);\n  rq = curve.z * rq * rq;\n  color *= max(rq, br - threshold) / max(br, 1.0e-4);\n  return color;\n}\nvec4 DownsampleBox4Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n  vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\n  vec4 s;\n  s =  texture(tex, uv + d.xy);\n  s += texture(tex, uv + d.zy);\n  s += texture(tex, uv + d.xw);\n  s += texture(tex, uv + d.zw);\n  return s * (1.0 / 4.0);\n}\nvec4 Prefilter(vec4 color, vec2 uv, float threshold, float softKnee)\n{\n    color = QuadraticThreshold(color, threshold, softKnee);\n    return color;\n}\nin vec2 v_uv;\nuniform Bloom {\n  float threshold;\n  float softKnee;\n};\nvec4 frag () {\n  vec4 color = DownsampleBox4Tap(pe_input_texture, v_uv, cc_screenSize.zw);\n  return Prefilter(color, v_uv, threshold, softKnee);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"precision highp float;\nuniform mediump vec4 cc_screenScale;\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform sampler2D pe_origin_texture;\nuniform sampler2D pe_input_texture;\nuniform mediump vec4 cc_screenSize;\nvec4 QuadraticThreshold(vec4 color, float threshold, float softKnee)\n{\n  vec3 curve = vec3(threshold - softKnee, softKnee * 2.0, 0.25 / softKnee);\n  float br = max(max(color.r, color.g), color.b);\n  float rq = clamp(br - curve.x, 0.0, curve.y);\n  rq = curve.z * rq * rq;\n  color *= max(rq, br - threshold) / max(br, 1.0e-4);\n  return color;\n}\nvec4 DownsampleBox4Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n  vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\n  vec4 s;\n  s =  texture2D(tex, uv + d.xy);\n  s += texture2D(tex, uv + d.zy);\n  s += texture2D(tex, uv + d.xw);\n  s += texture2D(tex, uv + d.zw);\n  return s * (1.0 / 4.0);\n}\nvec4 Prefilter(vec4 color, vec2 uv, float threshold, float softKnee)\n{\n    color = QuadraticThreshold(color, threshold, softKnee);\n    return color;\n}\nvarying vec2 v_uv;\nuniform float threshold;\nuniform float softKnee;\nvec4 frag () {\n  vec4 color = DownsampleBox4Tap(pe_input_texture, v_uv, cc_screenSize.zw);\n  return Prefilter(color, v_uv, threshold, softKnee);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[],"samplers":[]}},"defines":[],"blocks":[{"name":"Bloom","members":[{"name":"threshold","type":13,"count":1},{"name":"softKnee","type":13,"count":1}],"defines":[],"binding":0}],"samplers":[{"name":"pe_origin_texture","type":28,"count":1,"defines":[],"binding":31},{"name":"pe_input_texture","type":28,"count":1,"defines":[],"binding":32}],"attributes":[{"name":"a_position","type":14,"count":1,"defines":[],"format":21,"location":0},{"name":"a_texCoord","type":14,"count":1,"defines":[],"format":21,"location":1}],"record":null,"name":"../shader-lib/post-process/effects/bloom|post-process-vs:vert|prefilter4:frag"},{"hash":3550944192,"glsl3":{"vert":"precision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nin vec2 a_position;\nin vec2 a_texCoord;\nout vec2 v_uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform sampler2D pe_origin_texture;\nuniform sampler2D pe_input_texture;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nvec4 DownsampleBox4Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n  vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\n  vec4 s;\n  s =  texture(tex, uv + d.xy);\n  s += texture(tex, uv + d.zy);\n  s += texture(tex, uv + d.xw);\n  s += texture(tex, uv + d.zw);\n  return s * (1.0 / 4.0);\n}\nin vec2 v_uv;\nvec4 frag () {\n  return DownsampleBox4Tap(pe_input_texture, v_uv, cc_screenSize.zw);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"precision highp float;\nuniform mediump vec4 cc_screenScale;\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform sampler2D pe_origin_texture;\nuniform sampler2D pe_input_texture;\nuniform mediump vec4 cc_screenSize;\nvec4 DownsampleBox4Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n  vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\n  vec4 s;\n  s =  texture2D(tex, uv + d.xy);\n  s += texture2D(tex, uv + d.zy);\n  s += texture2D(tex, uv + d.xw);\n  s += texture2D(tex, uv + d.zw);\n  return s * (1.0 / 4.0);\n}\nvarying vec2 v_uv;\nvec4 frag () {\n  return DownsampleBox4Tap(pe_input_texture, v_uv, cc_screenSize.zw);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[],"samplers":[]}},"defines":[],"blocks":[],"samplers":[{"name":"pe_origin_texture","type":28,"count":1,"defines":[],"binding":31},{"name":"pe_input_texture","type":28,"count":1,"defines":[],"binding":32}],"attributes":[{"name":"a_position","type":14,"count":1,"defines":[],"format":21,"location":0},{"name":"a_texCoord","type":14,"count":1,"defines":[],"format":21,"location":1}],"record":null,"name":"../shader-lib/post-process/effects/bloom|post-process-vs:vert|downsample4:frag"},{"hash":2913749250,"glsl3":{"vert":"precision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nin vec2 a_position;\nin vec2 a_texCoord;\nout vec2 v_uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform sampler2D pe_origin_texture;\nuniform sampler2D pe_input_texture;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nvec4 UpsampleBox(sampler2D tex, vec2 uv, vec2 texelSize, float sampleScale)\n{\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0) * sampleScale;\n    vec4 s;\n    s =  texture(tex, uv + d.xy);\n    s += texture(tex, uv + d.zy);\n    s += texture(tex, uv + d.xw);\n    s += texture(tex, uv + d.zw);\n    return s * (1.0 / 4.0);\n}\nvec4 Combine(vec4 color, sampler2D originTexture, vec2 uv)\n{\n  return color + texture(originTexture, uv);\n}\nin vec2 v_uv;\nuniform Bloom {\n  float sampleScale;\n};\nuniform sampler2D bloom_texture;\nvec4 frag () {\n  vec4 bloom = UpsampleBox(bloom_texture, v_uv, cc_screenSize.zw, sampleScale);\n  return Combine(bloom, pe_origin_texture, v_uv);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"precision highp float;\nuniform mediump vec4 cc_screenScale;\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform sampler2D pe_origin_texture;\nuniform sampler2D pe_input_texture;\nuniform mediump vec4 cc_screenSize;\nvec4 UpsampleBox(sampler2D tex, vec2 uv, vec2 texelSize, float sampleScale)\n{\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0) * sampleScale;\n    vec4 s;\n    s =  texture2D(tex, uv + d.xy);\n    s += texture2D(tex, uv + d.zy);\n    s += texture2D(tex, uv + d.xw);\n    s += texture2D(tex, uv + d.zw);\n    return s * (1.0 / 4.0);\n}\nvec4 Combine(vec4 color, sampler2D originTexture, vec2 uv)\n{\n  return color + texture2D(originTexture, uv);\n}\nvarying vec2 v_uv;\nuniform float sampleScale;\nuniform sampler2D bloom_texture;\nvec4 frag () {\n  vec4 bloom = UpsampleBox(bloom_texture, v_uv, cc_screenSize.zw, sampleScale);\n  return Combine(bloom, pe_origin_texture, v_uv);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[],"samplers":[]}},"defines":[],"blocks":[{"name":"Bloom","members":[{"name":"sampleScale","type":13,"count":1}],"defines":[],"binding":0}],"samplers":[{"name":"pe_origin_texture","type":28,"count":1,"defines":[],"binding":31},{"name":"pe_input_texture","type":28,"count":1,"defines":[],"binding":32},{"name":"bloom_texture","type":28,"count":1,"defines":[],"binding":33}],"attributes":[{"name":"a_position","type":14,"count":1,"defines":[],"format":21,"location":0},{"name":"a_texCoord","type":14,"count":1,"defines":[],"format":21,"location":1}],"record":null,"name":"../shader-lib/post-process/effects/bloom|post-process-vs:vert|upsample:frag"},{"hash":3878018917,"glsl3":{"vert":"precision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nin vec2 a_position;\nin vec2 a_texCoord;\nout vec2 v_uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform sampler2D pe_origin_texture;\nuniform sampler2D pe_input_texture;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nvec4 QuadraticThreshold(vec4 color, float threshold, float softKnee)\n{\n  vec3 curve = vec3(threshold - softKnee, softKnee * 2.0, 0.25 / softKnee);\n  float br = max(max(color.r, color.g), color.b);\n  float rq = clamp(br - curve.x, 0.0, curve.y);\n  rq = curve.z * rq * rq;\n  color *= max(rq, br - threshold) / max(br, 1.0e-4);\n  return color;\n}\nvec4 DownsampleBox13Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n    vec4 A = texture(tex, uv + texelSize * vec2(-1.0, -1.0));\n    vec4 B = texture(tex, uv + texelSize * vec2( 0.0, -1.0));\n    vec4 C = texture(tex, uv + texelSize * vec2( 1.0, -1.0));\n    vec4 D = texture(tex, uv + texelSize * vec2(-0.5, -0.5));\n    vec4 E = texture(tex, uv + texelSize * vec2( 0.5, -0.5));\n    vec4 F = texture(tex, uv + texelSize * vec2(-1.0,  0.0));\n    vec4 G = texture(tex, uv                                 );\n    vec4 H = texture(tex, uv + texelSize * vec2( 1.0,  0.0));\n    vec4 I = texture(tex, uv + texelSize * vec2(-0.5,  0.5));\n    vec4 J = texture(tex, uv + texelSize * vec2( 0.5,  0.5));\n    vec4 K = texture(tex, uv + texelSize * vec2(-1.0,  1.0));\n    vec4 L = texture(tex, uv + texelSize * vec2( 0.0,  1.0));\n    vec4 M = texture(tex, uv + texelSize * vec2( 1.0,  1.0));\n    vec2 div = (1.0 / 4.0) * vec2(0.5, 0.125);\n    vec4 o = (D + E + I + J) * div.x;\n    o += (A + B + G + F) * div.y;\n    o += (B + C + H + G) * div.y;\n    o += (F + G + L + K) * div.y;\n    o += (G + H + M + L) * div.y;\n    return o;\n}\nvec4 Prefilter(vec4 color, vec2 uv, float threshold, float softKnee)\n{\n    color = QuadraticThreshold(color, threshold, softKnee);\n    return color;\n}\nin vec2 v_uv;\nuniform Bloom {\n  float threshold;\n  float softKnee;\n};\nvec4 frag () {\n  vec4 color = DownsampleBox13Tap(pe_input_texture, v_uv, cc_screenSize.zw);\n  return Prefilter(color, v_uv, threshold, softKnee);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"precision highp float;\nuniform mediump vec4 cc_screenScale;\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform sampler2D pe_origin_texture;\nuniform sampler2D pe_input_texture;\nuniform mediump vec4 cc_screenSize;\nvec4 QuadraticThreshold(vec4 color, float threshold, float softKnee)\n{\n  vec3 curve = vec3(threshold - softKnee, softKnee * 2.0, 0.25 / softKnee);\n  float br = max(max(color.r, color.g), color.b);\n  float rq = clamp(br - curve.x, 0.0, curve.y);\n  rq = curve.z * rq * rq;\n  color *= max(rq, br - threshold) / max(br, 1.0e-4);\n  return color;\n}\nvec4 DownsampleBox13Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n    vec4 A = texture2D(tex, uv + texelSize * vec2(-1.0, -1.0));\n    vec4 B = texture2D(tex, uv + texelSize * vec2( 0.0, -1.0));\n    vec4 C = texture2D(tex, uv + texelSize * vec2( 1.0, -1.0));\n    vec4 D = texture2D(tex, uv + texelSize * vec2(-0.5, -0.5));\n    vec4 E = texture2D(tex, uv + texelSize * vec2( 0.5, -0.5));\n    vec4 F = texture2D(tex, uv + texelSize * vec2(-1.0,  0.0));\n    vec4 G = texture2D(tex, uv                                 );\n    vec4 H = texture2D(tex, uv + texelSize * vec2( 1.0,  0.0));\n    vec4 I = texture2D(tex, uv + texelSize * vec2(-0.5,  0.5));\n    vec4 J = texture2D(tex, uv + texelSize * vec2( 0.5,  0.5));\n    vec4 K = texture2D(tex, uv + texelSize * vec2(-1.0,  1.0));\n    vec4 L = texture2D(tex, uv + texelSize * vec2( 0.0,  1.0));\n    vec4 M = texture2D(tex, uv + texelSize * vec2( 1.0,  1.0));\n    vec2 div = (1.0 / 4.0) * vec2(0.5, 0.125);\n    vec4 o = (D + E + I + J) * div.x;\n    o += (A + B + G + F) * div.y;\n    o += (B + C + H + G) * div.y;\n    o += (F + G + L + K) * div.y;\n    o += (G + H + M + L) * div.y;\n    return o;\n}\nvec4 Prefilter(vec4 color, vec2 uv, float threshold, float softKnee)\n{\n    color = QuadraticThreshold(color, threshold, softKnee);\n    return color;\n}\nvarying vec2 v_uv;\nuniform float threshold;\nuniform float softKnee;\nvec4 frag () {\n  vec4 color = DownsampleBox13Tap(pe_input_texture, v_uv, cc_screenSize.zw);\n  return Prefilter(color, v_uv, threshold, softKnee);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[],"samplers":[]}},"defines":[],"blocks":[{"name":"Bloom","members":[{"name":"threshold","type":13,"count":1},{"name":"softKnee","type":13,"count":1}],"defines":[],"binding":0}],"samplers":[{"name":"pe_origin_texture","type":28,"count":1,"defines":[],"binding":31},{"name":"pe_input_texture","type":28,"count":1,"defines":[],"binding":32}],"attributes":[{"name":"a_position","type":14,"count":1,"defines":[],"format":21,"location":0},{"name":"a_texCoord","type":14,"count":1,"defines":[],"format":21,"location":1}],"record":null,"name":"../shader-lib/post-process/effects/bloom|post-process-vs:vert|prefilter13:frag"},{"hash":2481252567,"glsl3":{"vert":"precision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nin vec2 a_position;\nin vec2 a_texCoord;\nout vec2 v_uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform sampler2D pe_origin_texture;\nuniform sampler2D pe_input_texture;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nvec4 DownsampleBox13Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n    vec4 A = texture(tex, uv + texelSize * vec2(-1.0, -1.0));\n    vec4 B = texture(tex, uv + texelSize * vec2( 0.0, -1.0));\n    vec4 C = texture(tex, uv + texelSize * vec2( 1.0, -1.0));\n    vec4 D = texture(tex, uv + texelSize * vec2(-0.5, -0.5));\n    vec4 E = texture(tex, uv + texelSize * vec2( 0.5, -0.5));\n    vec4 F = texture(tex, uv + texelSize * vec2(-1.0,  0.0));\n    vec4 G = texture(tex, uv                                 );\n    vec4 H = texture(tex, uv + texelSize * vec2( 1.0,  0.0));\n    vec4 I = texture(tex, uv + texelSize * vec2(-0.5,  0.5));\n    vec4 J = texture(tex, uv + texelSize * vec2( 0.5,  0.5));\n    vec4 K = texture(tex, uv + texelSize * vec2(-1.0,  1.0));\n    vec4 L = texture(tex, uv + texelSize * vec2( 0.0,  1.0));\n    vec4 M = texture(tex, uv + texelSize * vec2( 1.0,  1.0));\n    vec2 div = (1.0 / 4.0) * vec2(0.5, 0.125);\n    vec4 o = (D + E + I + J) * div.x;\n    o += (A + B + G + F) * div.y;\n    o += (B + C + H + G) * div.y;\n    o += (F + G + L + K) * div.y;\n    o += (G + H + M + L) * div.y;\n    return o;\n}\nin vec2 v_uv;\nvec4 frag () {\n  return DownsampleBox13Tap(pe_input_texture, v_uv, cc_screenSize.zw);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"precision highp float;\nuniform mediump vec4 cc_screenScale;\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform sampler2D pe_origin_texture;\nuniform sampler2D pe_input_texture;\nuniform mediump vec4 cc_screenSize;\nvec4 DownsampleBox13Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n    vec4 A = texture2D(tex, uv + texelSize * vec2(-1.0, -1.0));\n    vec4 B = texture2D(tex, uv + texelSize * vec2( 0.0, -1.0));\n    vec4 C = texture2D(tex, uv + texelSize * vec2( 1.0, -1.0));\n    vec4 D = texture2D(tex, uv + texelSize * vec2(-0.5, -0.5));\n    vec4 E = texture2D(tex, uv + texelSize * vec2( 0.5, -0.5));\n    vec4 F = texture2D(tex, uv + texelSize * vec2(-1.0,  0.0));\n    vec4 G = texture2D(tex, uv                                 );\n    vec4 H = texture2D(tex, uv + texelSize * vec2( 1.0,  0.0));\n    vec4 I = texture2D(tex, uv + texelSize * vec2(-0.5,  0.5));\n    vec4 J = texture2D(tex, uv + texelSize * vec2( 0.5,  0.5));\n    vec4 K = texture2D(tex, uv + texelSize * vec2(-1.0,  1.0));\n    vec4 L = texture2D(tex, uv + texelSize * vec2( 0.0,  1.0));\n    vec4 M = texture2D(tex, uv + texelSize * vec2( 1.0,  1.0));\n    vec2 div = (1.0 / 4.0) * vec2(0.5, 0.125);\n    vec4 o = (D + E + I + J) * div.x;\n    o += (A + B + G + F) * div.y;\n    o += (B + C + H + G) * div.y;\n    o += (F + G + L + K) * div.y;\n    o += (G + H + M + L) * div.y;\n    return o;\n}\nvarying vec2 v_uv;\nvec4 frag () {\n  return DownsampleBox13Tap(pe_input_texture, v_uv, cc_screenSize.zw);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[],"samplers":[]}},"defines":[],"blocks":[],"samplers":[{"name":"pe_origin_texture","type":28,"count":1,"defines":[],"binding":31},{"name":"pe_input_texture","type":28,"count":1,"defines":[],"binding":32}],"attributes":[{"name":"a_position","type":14,"count":1,"defines":[],"format":21,"location":0},{"name":"a_texCoord","type":14,"count":1,"defines":[],"format":21,"location":1}],"record":null,"name":"../shader-lib/post-process/effects/bloom|post-process-vs:vert|downsample13:frag"}]},{"__type__":"cc.EffectAsset","_name":"../shader-lib/post-process/effects/vignette","techniques":[{"passes":[{"program":"../shader-lib/post-process/effects/vignette|post-process-vs:vert|fs:frag","properties":{"radius":{"value":[1],"type":13},"smoothness":{"value":[0.3],"type":13},"intensity":{"value":[1],"type":13},"color":{"value":[0,0,0,1],"type":16}}}]}],"shaders":[{"hash":1671074285,"glsl3":{"vert":"precision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nin vec2 a_position;\nin vec2 a_texCoord;\nout vec2 v_uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform sampler2D pe_origin_texture;\nuniform sampler2D pe_input_texture;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nin vec2 v_uv;\nuniform Vignette {\n  vec4 color;\n  float radius;\n  float smoothness;\n  float intensity;\n};\nfloat vignette(vec2 uv, float a, float b) {\n  float len = length(uv - 0.5);\n  return smoothstep(a, b, len);\n}\nvec4 frag () {\n  vec4 final = texture(pe_input_texture, v_uv);\n  final.a = 1.;\n  float v = vignette(v_uv, radius, smoothness);\n  vec3 vignetteColor = final.rgb * v;\n  vignetteColor += color.rgb * (1.0 - v);\n  final.rgb = mix(final.rgb, vignetteColor, intensity);\n  return final;\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"precision highp float;\nuniform mediump vec4 cc_screenScale;\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform sampler2D pe_origin_texture;\nuniform sampler2D pe_input_texture;\nvarying vec2 v_uv;\nuniform vec4 color;\nuniform float radius;\nuniform float smoothness;\nuniform float intensity;\nfloat vignette(vec2 uv, float a, float b) {\n  float len = length(uv - 0.5);\n  return smoothstep(a, b, len);\n}\nvec4 frag () {\n  vec4 final = texture2D(pe_input_texture, v_uv);\n  final.a = 1.;\n  float v = vignette(v_uv, radius, smoothness);\n  vec3 vignetteColor = final.rgb * v;\n  vignetteColor += color.rgb * (1.0 - v);\n  final.rgb = mix(final.rgb, vignetteColor, intensity);\n  return final;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[],"samplers":[]}},"defines":[],"blocks":[{"name":"Vignette","members":[{"name":"color","type":16,"count":1},{"name":"radius","type":13,"count":1},{"name":"smoothness","type":13,"count":1},{"name":"intensity","type":13,"count":1}],"defines":[],"binding":0}],"samplers":[{"name":"pe_origin_texture","type":28,"count":1,"defines":[],"binding":31},{"name":"pe_input_texture","type":28,"count":1,"defines":[],"binding":32}],"attributes":[{"name":"a_position","type":14,"count":1,"defines":[],"format":21,"location":0},{"name":"a_texCoord","type":14,"count":1,"defines":[],"format":21,"location":1}],"record":null,"name":"../shader-lib/post-process/effects/vignette|post-process-vs:vert|fs:frag"}]}]
