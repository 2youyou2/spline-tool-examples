// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: post-effect-vs:vert
      frag: fs:frag
      properties:
        radius: { value: 1 }
        smoothness: { value: 0.3 }
        intensity: { value: 1.0 }
        color: { value: [0, 0, 0, 1], editor: { type: color } }
}%

CCProgram post-effect-vs %{
precision highp float;
#include <common>
#include <cc-global>

in vec2 a_position;
in vec2 a_texCoord;
out vec2 v_uv;

vec4 vert () {
  vec4 pos = vec4(a_position, 0, 1);
  v_uv = a_texCoord * cc_screenScale.xy;

  return pos;
}
}%

CCProgram cc-post-effect %{
// #pragma builtin(local)
// uniform CCPostEffect {
//   vec2 cc_pe_resolution;
// };

// #pragma builtin(local)
uniform sampler2D pe_origin_texture;
// #pragma builtin(local)
uniform sampler2D pe_input_texture;
}%

CCProgram fs %{
  precision highp float;
  #include <cc-post-effect>
  in vec2 v_uv;

  uniform Vignette {
    vec4 color;
    float radius;
    float smoothness;
    float intensity;
  };

  float vignette(vec2 uv, float a, float b) {
    float len = length(uv - 0.5);
    return smoothstep(a, b, len);
  }

  vec4 frag () {
    vec4 final = texture(pe_input_texture, v_uv);
    final.a = 1.;
    float v = vignette(v_uv, radius, smoothness);
    vec3 vignetteColor = final.rgb * v;
    vignetteColor += color.rgb * (1.0 - v);
    final.rgb = mix(final.rgb, vignetteColor, intensity);
    return final;
  }
}%