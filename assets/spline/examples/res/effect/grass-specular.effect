// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        bumpMap:    { value: white }
        bumpScale: { value: 1 }
        healthyColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        dryColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        tilingOffset:   { value: [1.0, 1.0, 0.0, 0.0] }
        cutoff: { value: 0.5 }
        colorNoiseSpread: { value: 15 }
}%

CCProgram unlit-vs %{

precision highp float;
#include <cc-global>
#include <cc-local-batch>
#include <input-standard>

in vec3 a_color;

#if HAS_SECOND_UV
  in vec2 a_texCoord1;
#endif

out vec3 v_position;
out vec3 v_normal;
out vec3 v_tangent;
out vec3 v_bitangent;
out vec2 v_uv;
out vec2 v_uv1;
out vec3 v_color;

vec4 vert () {
  StandardVertInput In;
  CCVertInput(In);

  mat4 matWorld, matWorldIT;
  CCGetWorldMatrixFull(matWorld, matWorldIT);

  v_position = (matWorld * In.position).xyz;
  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);
  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);
  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w; // note the cross order

  v_uv = a_texCoord;
  #if HAS_SECOND_UV
    v_uv1 = a_texCoord1;
  #endif
  v_color = a_color;

  return cc_matProj * (cc_matView * matWorld) * In.position;
}

}%

CCProgram unlit-fs %{
  precision highp float;
  #include <output>

  in vec2 v_uv;
  in vec3 v_position;
  uniform sampler2D mainTexture;
  uniform sampler2D bumpMap;

  uniform Constant {
    vec4 tilingOffset;
    vec4 healthyColor;
    vec4 dryColor;
    float bumpScale;
    float cutoff;
    float colorNoiseSpread;
  };

  vec3 mod2D289( vec3 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }

	vec2 mod2D289( vec2 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }

	vec3 permute( vec3 x ) { return mod2D289( ( ( x * 34.0 ) + 1.0 ) * x ); }

  float snoise( vec2 v )
  {
    const vec4 C = vec4( 0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439 );
    vec2 i = floor( v + dot( v, C.yy ) );
    vec2 x0 = v - i + dot( i, C.xx );
    vec2 i1;
    i1 = ( x0.x > x0.y ) ? vec2( 1.0, 0.0 ) : vec2( 0.0, 1.0 );
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;
    i = mod2D289( i );
    vec3 p = permute( permute( i.y + vec3( 0.0, i1.y, 1.0 ) ) + i.x + vec3( 0.0, i1.x, 1.0 ) );
    vec3 m = max( 0.5 - vec3( dot( x0, x0 ), dot( x12.xy, x12.xy ), dot( x12.zw, x12.zw ) ), 0.0 );
    m = m * m;
    m = m * m;
    vec3 x = 2.0 * fract( p * C.www ) - 1.0;
    vec3 h = abs( x ) - 0.5;
    vec3 ox = floor( x + 0.5 );
    vec3 a0 = x - ox;
    m *= 1.79284291400159 - 0.85373472095314 * ( a0 * a0 + h * h );
    vec3 g;
    g.x = a0.x * x0.x + h.x * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot( m, g );
  }

  vec4 frag () {
    vec2 uv = v_uv * tilingOffset.xy + tilingOffset.zw;
    vec4 color = texture(mainTexture, v_uv);

    vec3 ase_worldPos = v_position;
    vec2 appendResult427 = vec2(ase_worldPos.x , ase_worldPos.z);
    float simplePerlin2D432 = snoise( appendResult427 / colorNoiseSpread );
    vec4 lerpResult433 = mix( healthyColor , dryColor , simplePerlin2D432);

    color *= lerpResult433;

    if (color.a < cutoff) {
      discard;
    }
    return CCFragOutput(color);
  }
}%
